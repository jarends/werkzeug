// Generated by CoffeeScript 1.10.0
(function() {
  var Path, PathHelper;

  Path = require('path');

  PathHelper = (function() {
    function PathHelper() {}

    PathHelper.sass = /\.sass$|\.scss$/;

    PathHelper.less = /\.less$/;

    PathHelper.stylus = /\.stylus$/;

    PathHelper.ts = /\.ts$/;

    PathHelper.coffee = /\.coffee$/;

    PathHelper.js = /\.js$/;

    PathHelper.jsMap = /\.js\.map$/;

    PathHelper.css = /\.css$/;

    PathHelper.cssMap = /\.css\.map$/;

    PathHelper.testSass = function(path) {
      return this.sass.test(path);
    };

    PathHelper.testLess = function(path) {
      return this.less.test(path);
    };

    PathHelper.testStylus = function(path) {
      return this.stylus.test(path);
    };

    PathHelper.testTS = function(path) {
      return this.ts.test(path);
    };

    PathHelper.testCoffee = function(path) {
      return this.coffee.test(path);
    };

    PathHelper.testJS = function(path) {
      return this.js.test(path);
    };

    PathHelper.testJSMap = function(path) {
      return this.jsMap.test(path);
    };

    PathHelper.testCss = function(path) {
      return this.css.test(path);
    };

    PathHelper.testCssMap = function(path) {
      return this.cssMap.test(path);
    };

    PathHelper.correctOut = function(path) {
      if (this.testSass(path)) {
        return path.replace(this.sass, '.css');
      }
      if (this.testLess(path)) {
        return path.replace(this.less, '.css');
      }
      if (this.testStylus(path)) {
        return path.replace(this.stylus, '.css');
      }
      if (this.testTS(path)) {
        return path.replace(this.ts, '.js');
      }
      if (this.testCoffee(path)) {
        return path.replace(this.coffee, '.js');
      }
      return path;
    };

    PathHelper.getIn = function(cfg, type) {
      var c, p;
      c = cfg[type];
      p = c && c["in"] ? c["in"] : cfg["in"];
      return Path.join(cfg.base, p);
    };

    PathHelper.getOut = function(cfg, type) {
      var c, p;
      c = cfg[type];
      p = c && c.out ? c.out : cfg.out;
      return Path.join(cfg.base, p);
    };

    PathHelper.outFromIn = function(cfg, type, path, correct) {
      var inPath, outPath, rel;
      inPath = this.getIn(cfg, type);
      outPath = this.getOut(cfg, type);
      rel = path.replace(inPath, outPath);
      if (!correct) {
        return rel;
      }
      return PathHelper.correctOut(rel);
    };

    PathHelper.getPaths = function(cfg) {
      var base, out, outPaths, type;
      base = cfg.base;
      outPaths = [Path.join(base, cfg.out)];
      for (type in cfg) {
        out = cfg[type].out;
        if (out) {
          out = Path.join(base, out);
          if (outPaths.indexOf(out) === -1) {
            outPaths.push(out);
          }
        }
      }
      return outPaths;
    };

    return PathHelper;

  })();

  module.exports = PathHelper;

}).call(this);
