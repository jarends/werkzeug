// Generated by CoffeeScript 1.10.0
(function() {
  var FS, Path, getExt, getStat, isDir, isFile, requireJsOrJson, requireJson, requireSave, rmDir,
    slice = [].slice;

  FS = require('fs');

  Path = require('path');

  requireSave = function(name) {
    var e, error, path;
    if (isFile(name)) {
      path = name;
    }
    if (isFile(name + '.js')) {
      path = name;
    }
    if (!path) {
      return null;
    }
    try {
      return require(path);
    } catch (error) {
      e = error;
      return null;
    }
  };

  requireJson = function(name) {
    var e, error, path;
    if (isFile(name)) {
      path = name;
    }
    if (isFile(name + '.json')) {
      path = name;
    }
    if (!path) {
      return null;
    }
    try {
      return JSON.parse(FS.readFileSync(path, 'utf8'));
    } catch (error) {
      e = error;
      return null;
    }
  };

  requireJsOrJson = function() {
    var names, path, r;
    names = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    path = Path.join.apply(null, names);
    r = requireSave(path);
    if (!r) {
      r = requireJson(path);
    }
    return r;
  };

  rmDir = function(dir) {
    var file, i, len, list, name, stat;
    list = FS.readdirSync(dir);
    for (i = 0, len = list.length; i < len; i++) {
      name = list[i];
      file = Path.join(dir, name);
      stat = FS.statSync(file);
      if (name !== '.' && name !== '..') {
        if (stat.isDirectory()) {
          rmDir(file);
        } else {
          FS.unlinkSync(file);
        }
      }
    }
    return FS.rmdirSync(dir);
  };

  getExt = function(path, ext) {
    if (!path) {
      return null;
    }
    if (ext) {
      if (new RegExp('\\.' + ext + '$').test(path)) {
        return '';
      }
      return ext;
    }
    if (path.indexOf('.' > -1)) {
      return path.split('.').pop();
    }
    return '';
  };

  isDir = function(path) {
    var stat;
    stat = getStat(path);
    if (stat != null ? stat.isDirectory() : void 0) {
      return true;
    }
    return false;
  };

  isFile = function(path) {
    var stat;
    stat = getStat(path);
    if (stat != null ? stat.isFile() : void 0) {
      return true;
    }
    return false;
  };

  getStat = function(path) {
    var error;
    try {
      return FS.statSync(path);
    } catch (error) {
      return null;
    }
  };

  module.exports = {
    require: requireJsOrJson,
    requireSave: requireSave,
    requireJson: requireJson,
    rmDir: rmDir,
    getExt: getExt,
    isDir: isDir,
    isFile: isFile,
    getStat: getStat
  };

}).call(this);

//# sourceMappingURL=fsu.js.map
