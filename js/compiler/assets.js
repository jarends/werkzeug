// Generated by CoffeeScript 1.10.0
(function() {
  var AssetCompiler, FS, FSU, IPC, Path, Reg;

  FS = require('fs-extra');

  Path = require('path');

  Reg = require('../utils/regex');

  FSU = require('../utils/fsu');

  IPC = require('../utils/ipc');

  AssetCompiler = (function() {
    function AssetCompiler() {
      this.cfg = null;
      this.errors = null;
      this.openFiles = 0;
      this.ipc = new IPC(process, this);
    }

    AssetCompiler.prototype.init = function(cfg) {
      this.cfg = cfg;
      return null;
    };

    AssetCompiler.prototype.compile = function(files) {
      var base, file, i, len, out, path, tmp;
      this.errors = [];
      this.openFiles = 0;
      base = this.cfg.base;
      tmp = Path.join(base, this.cfg.tmp);
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        ++this.openFiles;
        path = file.path;
        out = Path.join(tmp, Path.relative(base, path));
        if (!file.removed) {
          this.copy(path, out);
        } else {
          this.remove(path, out);
        }
      }
      if (!this.openFiles) {
        this.compiled();
      }
      return null;
    };

    AssetCompiler.prototype.copy = function(path, out) {
      FS.copy(path, out, (function(_this) {
        return function(error) {
          --_this.openFiles;
          if (error) {
            _this.errors.push({
              path: path,
              error: error
            });
          }
          if (_this.openFiles === 0) {
            _this.compiled();
          }
          return null;
        };
      })(this));
      return null;
    };

    AssetCompiler.prototype.remove = function(path, out) {
      var map;
      out = Reg.correctOut(out);
      map = out + '.map';
      if (FSU.isFile(map)) {
        FS.removeSync(map);
      }
      FS.remove(out, (function(_this) {
        return function(error) {
          --_this.openFiles;
          if (error) {
            _this.errors.push({
              path: path,
              error: error
            });
          }
          if (_this.openFiles === 0) {
            _this.compiled();
          }
          return null;
        };
      })(this));
      return null;
    };

    AssetCompiler.prototype.compiled = function() {
      return this.ipc.send('compiled', 'assets', this.errors);
    };

    return AssetCompiler;

  })();

  module.exports = new AssetCompiler();

}).call(this);

//# sourceMappingURL=assets.js.map
