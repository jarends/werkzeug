// Generated by CoffeeScript 1.10.0
(function() {
  var FS, FSU, IPC, LessCompiler, Path, _, options;

  FS = require('fs');

  Path = require('path');

  _ = require('../utils/pimped-lodash');

  FSU = require('../utils/fsu');

  IPC = require('../utils/ipc');

  options = {
    'style': 'nested',
    'stop-on-error': false,
    'sourcemap': 'auto',
    'default-encoding': 'utf-8',
    'check': true,
    'precision': 5,
    'cache-location': '',
    'quiet': false
  };

  LessCompiler = (function() {
    function LessCompiler() {
      this.files = {};
      this.paths = [];
      this.ipc = new IPC(process, this);
    }

    LessCompiler.prototype.init = function(files, cfg) {
      var file, i, len, results;
      this.cfg = cfg;
      console.log('init lessw');
      options['cache-location'] = Path.join(this.cfg.base, this.cfg.tmp, '.sass-cache');
      files = files || [];
      if (files) {
        results = [];
        for (i = 0, len = files.length; i < len; i++) {
          file = files[i];
          results.push(this.addPath(file.path));
        }
        return results;
      }
    };

    LessCompiler.prototype.addPath = function(path) {
      if (Path.basename(path)[0] === '_') {
        return null;
      }
      if (!this.files[path]) {
        this.paths.push(path);
        this.files[path] = {
          version: 0
        };
      }
      return null;
    };

    LessCompiler.prototype.compileAll = function() {
      var args, errors, sass, t;
      t = Date.now();
      errors = [];
      args = this.createCmdArgs(this.paths);
      sass = Spawn('sass', args);
      sass.on('error', (function(_this) {
        return function(error) {
          console.log('sass ERROR: ', error);
          return _this.ipc.send('initComplete', errors);
        };
      })(this));
      sass.on('close', (function(_this) {
        return function(code) {
          console.log('sass initialized in ' + (Date.now() - t) + 'ms');
          return _this.ipc.send('initComplete', errors);
        };
      })(this));
      sass.stdout.on('data', (function(_this) {
        return function(data) {
          var error, i, len, line, results;
          data = data.toString().split(/\\r\\n|\\n/);
          results = [];
          for (i = 0, len = data.length; i < len; i++) {
            line = data[i];
            error = _this.getError(line);
            if (error) {
              results.push(errors.push(error));
            } else {
              results.push(void 0);
            }
          }
          return results;
        };
      })(this));
      sass.stderr.on('data', (function(_this) {
        return function(data) {
          return console.log('sass ERR.DATA: ', data.toString());
        };
      })(this));
      return null;
    };

    LessCompiler.prototype.createCmdArgs = function(paths) {
      var args, i, key, len, out, path, value;
      args = [];
      for (key in options) {
        value = options[key];
        if (key === 'update') {
          null;
        } else if (_.isBoolean(value)) {
          if (value) {
            args.push('--' + key);
          }
        } else {
          if (key === 'sourcemap') {
            args.push('--' + key + '=' + value);
          } else {
            args.push('--' + key);
            args.push(value);
          }
        }
      }
      for (i = 0, len = paths.length; i < len; i++) {
        path = paths[i];
        out = Path.join(this.cfg.base, this.cfg.tmp, Path.relative(this.cfg.base, path));
        out = out.replace(/\.sass$|\.scss$/, '.css');
        args.push(path + ':' + out);
      }
      return args;
    };

    LessCompiler.prototype.getError = function(data) {
      var end, error, path;
      if (!/^      error /.test(data)) {
        return null;
      }
      data = data.substr(12);
      end = data.indexOf(' (Line');
      path = data.substr(0, end);
      error = data.substr(end);
      return {
        path: path,
        error: error
      };
    };

    return LessCompiler;

  })();

  module.exports = new LessCompiler();

}).call(this);
